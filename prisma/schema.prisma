generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model companies {
  id            BigInt          @id @default(autoincrement())
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  name          String          @db.VarChar(255)
  document      String          @unique(map: "companies_document_unique") @db.VarChar(255)
  token         String          @unique(map: "companies_token_unique") @db.VarChar(255)
  deleted_at    DateTime?       @db.Timestamp(0)
  notifications notifications[]
  points        points[]
  transactions  transactions[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model groups {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  owner      BigInt
  deleted_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groups_owner_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model notifications {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  id_user    BigInt
  id_company BigInt
  title      String    @db.VarChar(255)
  message    String
  deleted_at DateTime? @db.Timestamp(0)
  companies  companies @relation(fields: [id_company], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_id_company_foreign")
  users      users     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notifications_id_user_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model points {
  id             BigInt       @id @default(autoincrement())
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  id_user        BigInt
  id_company     BigInt
  id_transaction BigInt
  total          Decimal      @db.Decimal(10, 2)
  due_date       DateTime     @db.Date
  used           Decimal      @default(0) @db.Decimal(10, 2)
  deleted_at     DateTime?    @db.Timestamp(0)
  companies      companies    @relation(fields: [id_company], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "points_id_company_foreign")
  transactions   transactions @relation(fields: [id_transaction], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "points_id_transaction_foreign")
  users          users        @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "points_id_user_foreign")
}

model transactions {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  id_user    BigInt
  id_company BigInt
  type       String    @db.VarChar(255)
  total      Decimal   @db.Decimal(10, 2)
  document   String?   @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  points     points[]
  companies  companies @relation(fields: [id_company], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_id_company_foreign")
  users      users     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_id_user_foreign")
}

model users {
  id                BigInt          @id @default(autoincrement())
  name              String          @db.VarChar(255)
  email             String          @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?       @db.Timestamp(0)
  password          String          @db.VarChar(255)
  remember_token    String?         @db.VarChar(100)
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  first_name        String          @db.VarChar(255)
  last_name         String          @db.VarChar(255)
  document          String          @unique(map: "users_document_unique") @db.VarChar(255)
  token             String?
  groups            groups[]
  notifications     notifications[]
  points            points[]
  transactions      transactions[]
}
